import random
import string
import os
from register import registerObj
import writer

class avi_virtualservice:
    playbook_name = ''
    hosts=[]
    register=[]
    name = ''
    active_standby_se_tag = ''
    analytics_policy = ''
    analytics_profile_ref = ''
    api_context = ''
    api_version = ''
    application_profile_ref = ''
    auto_allocate_floating_ip = ''
    auto_allocate_ip = ''
    availability_zone = ''
    avi_allocated_fip = ''
    avi_allocated_vip = ''
    avi_api_patch_op = ''
    avi_api_update_method = ''
    avi_credentials = ''
    bulk_sync_kvcache = ''
    client_auth = ''
    close_client_conn_on_config_update = ''
    cloud_config_cksum = ''
    cloud_ref = ''
    cloud_type = ''
    connections_rate_limit = ''
    content_rewrite = ''
    controller = ''
    created_by = ''
    delay_fairness = ''
    description = ''
    discovered_network_ref = ''
    discovered_networks = ''
    discovered_subnet = ''
    dns_info = ''
    dns_policies = ''
    east_west_placement = ''
    enable_autogw = ''
    enable_rhi = ''
    enable_rhi_snat = ''
    enabled = ''
    error_page_profile_ref = ''
    floating_ip = ''
    floating_subnet_uuid = ''
    flow_dist = ''
    flow_label_type = ''
    fqdn = ''
    host_name_xlate = ''
    http_policies = ''
    ign_pool_net_reach = ''
    ip_address = ''
    ipam_network_subnet = ''
    l4_policies = ''
    limit_doser = ''
    max_cps_per_client = ''
    microservice_ref = ''
    network_profile_ref = ''
    network_ref = ''
    network_security_policy_ref = ''
    nsx_securitygroup = ''
    password = ''
    performance_limits = ''
    pool_group_ref = ''
    pool_ref = ''
    port_uuid = ''
    remove_listening_port_on_vs_down = ''
    requests_rate_limit = ''
    scaleout_ecmp = ''
    se_group_ref = ''
    server_network_profile_ref = ''
    service_metadata = ''
    service_pool_select = ''
    services = ''
    sideband_profile = ''
    snat_ip = ''
    sp_pool_refs = ''
    ssl_key_and_certificate_refs = ''
    ssl_profile_ref = ''
    ssl_sess_cache_avg_size = ''
    state = ''
    static_dns_records = ''
    subnet = ''
    subnet_uuid = ''
    tenant = ''
    tenant_ref = ''
    tenant_uuid = ''
    traffic_clone_profile_ref = ''
    traffic_enabled = ''
    type = ''
    url = ''
    use_bridge_ip_as_vip = ''
    use_vip_as_snat = ''
    username = ''
    uuid = ''
    vh_domain_name = ''
    vh_parent_vs_uuid = ''
    vip = ''
    vrf_context_ref = ''
    vs_datascripts = ''
    vsvip_ref = ''
    waf_policy_ref = ''
    weight = ''
    def compile(self):
       self.playbook_name=writer.writer(self,self.playbook_name)

    def run(self):
       dump_name=''.join([random.choice(string.ascii_letters + string.digits) for n in range(32)])
       os.system('{} | tee {}'.format(self.playbook_name,dump_name))
       self.register = registerObj(dump_name)
       os.remove(dump_name)

    def go(self):
       self.compile()
       self.run()

