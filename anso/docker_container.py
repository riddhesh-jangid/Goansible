import random
import string
import os
from register import registerObj
import writer

class docker_container:
    playbook_name = ''
    hosts=[]
    register=[]
    name = ''
    api_version = ''
    auto_remove = ''
    blkio_weight = ''
    ca_cert = ''
    cap_drop = ''
    capabilities = ''
    cleanup = ''
    client_cert = ''
    client_key = ''
    command = ''
    comparisons = ''
    cpu_period = ''
    cpu_quota = ''
    cpu_shares = ''
    cpuset_cpus = ''
    cpuset_mems = ''
    debug = ''
    detach = ''
    device_read_bps = ''
    device_read_iops = ''
    device_write_bps = ''
    device_write_iops = ''
    devices = ''
    dns_opts = ''
    dns_search_domains = ''
    dns_servers = ''
    docker_host = ''
    domainname = ''
    entrypoint = ''
    env = ''
    env_file = ''
    etc_hosts = ''
    exposed_ports = ''
    force_kill = ''
    groups = ''
    healthcheck = ''
    hostname = ''
    ignore_image = ''
    image = ''
    init = ''
    interactive = ''
    ipc_mode = ''
    keep_volumes = ''
    kernel_memory = ''
    kill_signal = ''
    labels = ''
    links = ''
    log_driver = ''
    log_options = ''
    mac_address = ''
    memory = ''
    memory_reservation = ''
    memory_swap = ''
    memory_swappiness = ''
    network_mode = ''
    networks = ''
    networks_cli_compatible = ''
    oom_killer = ''
    oom_score_adj = ''
    output_logs = ''
    paused = ''
    pid_mode = ''
    pids_limit = ''
    privileged = ''
    published_ports = ''
    pull = ''
    purge_networks = ''
    read_only = ''
    recreate = ''
    restart = ''
    restart_policy = ''
    restart_retries = ''
    runtime = ''
    security_opts = ''
    shm_size = ''
    ssl_version = ''
    state = ''
    stop_signal = ''
    stop_timeout = ''
    sysctls = ''
    timeout = ''
    tls = ''
    tls_hostname = ''
    tmpfs = ''
    trust_image_content = ''
    tty = ''
    ulimits = ''
    user = ''
    userns_mode = ''
    uts = ''
    validate_certs = ''
    volume_driver = ''
    volumes = ''
    volumes_from = ''
    working_dir = ''
    def compile(self):
       self.playbook_name=writer.writer(self,self.playbook_name)

    def run(self):
       dump_name=''.join([random.choice(string.ascii_letters + string.digits) for n in range(32)])
       os.system('{} | tee {}'.format(self.playbook_name,dump_name))
       self.register = registerObj(dump_name)
       os.remove(dump_name)

    def go(self):
       self.compile()
       self.run()

