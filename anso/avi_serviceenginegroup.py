import random
import string
import os
from register import registerObj
import writer

class avi_serviceenginegroup:
    playbook_name = ''
    hosts=[]
    register=[]
    name = ''
    active_standby = ''
    advertise_backend_networks = ''
    aggressive_failure_detection = ''
    algo = ''
    allow_burst = ''
    api_context = ''
    api_version = ''
    archive_shm_limit = ''
    async_ssl = ''
    async_ssl_threads = ''
    auto_rebalance = ''
    auto_rebalance_capacity_per_se = ''
    auto_rebalance_criteria = ''
    auto_rebalance_interval = ''
    auto_redistribute_active_standby_load = ''
    avi_api_patch_op = ''
    avi_api_update_method = ''
    avi_credentials = ''
    buffer_se = ''
    cloud_ref = ''
    connection_memory_percentage = ''
    controller = ''
    cpu_reserve = ''
    cpu_socket_affinity = ''
    custom_securitygroups_data = ''
    custom_securitygroups_mgmt = ''
    custom_tag = ''
    dedicated_dispatcher_core = ''
    description = ''
    disable_csum_offloads = ''
    disable_gro = ''
    disable_tso = ''
    disk_per_se = ''
    distribute_load_active_standby = ''
    enable_hsm_priming = ''
    enable_routing = ''
    enable_vip_on_all_interfaces = ''
    enable_vmac = ''
    extra_config_multiplier = ''
    extra_shared_config_memory = ''
    floating_intf_ip = ''
    floating_intf_ip_se_2 = ''
    flow_table_new_syn_max_entries = ''
    ha_mode = ''
    hardwaresecuritymodulegroup_ref = ''
    hm_on_standby = ''
    host_attribute_key = ''
    host_attribute_value = ''
    host_gateway_monitor = ''
    hypervisor = ''
    ignore_rtt_threshold = ''
    ingress_access_data = ''
    ingress_access_mgmt = ''
    instance_flavor = ''
    iptables = ''
    least_load_core_selection = ''
    license_tier = ''
    license_type = ''
    log_disksz = ''
    max_cpu_usage = ''
    max_scaleout_per_vs = ''
    max_se = ''
    max_vs_per_se = ''
    mem_reserve = ''
    memory_per_se = ''
    mgmt_network_ref = ''
    mgmt_subnet = ''
    min_cpu_usage = ''
    min_scaleout_per_vs = ''
    non_significant_log_throttle = ''
    num_flow_cores_sum_changes_to_ignore = ''
    openstack_availability_zone = ''
    openstack_availability_zones = ''
    openstack_mgmt_network_name = ''
    openstack_mgmt_network_uuid = ''
    os_reserved_memory = ''
    password = ''
    per_app = ''
    placement_mode = ''
    realtime_se_metrics = ''
    se_bandwidth_type = ''
    se_deprovision_delay = ''
    se_dos_profile = ''
    se_ipc_udp_port = ''
    se_name_prefix = ''
    se_probe_port = ''
    se_remote_punt_udp_port = ''
    se_sb_dedicated_core = ''
    se_sb_threads = ''
    se_thread_multiplier = ''
    se_tunnel_mode = ''
    se_tunnel_udp_port = ''
    se_udp_encap_ipc = ''
    se_vs_hb_max_pkts_in_batch = ''
    se_vs_hb_max_vs_in_pkt = ''
    service_ip_subnets = ''
    significant_log_throttle = ''
    state = ''
    tenant = ''
    tenant_ref = ''
    tenant_uuid = ''
    udf_log_throttle = ''
    url = ''
    username = ''
    uuid = ''
    vcenter_clusters = ''
    vcenter_datastore_mode = ''
    vcenter_datastores = ''
    vcenter_datastores_include = ''
    vcenter_folder = ''
    vcenter_hosts = ''
    vcpus_per_se = ''
    vs_host_redundancy = ''
    vs_scalein_timeout = ''
    vs_scalein_timeout_for_upgrade = ''
    vs_scaleout_timeout = ''
    vss_placement = ''
    waf_mempool = ''
    waf_mempool_size = ''
    def compile(self):
       self.playbook_name=writer.writer(self,self.playbook_name)

    def run(self):
       dump_name=''.join([random.choice(string.ascii_letters + string.digits) for n in range(32)])
       os.system('{} | tee {}'.format(self.playbook_name,dump_name))
       self.register = registerObj(dump_name)
       os.remove(dump_name)

    def go(self):
       self.compile()
       self.run()

